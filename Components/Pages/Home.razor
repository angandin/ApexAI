@page "/"
@using System.Text.Json
@rendermode InteractiveServer
@inject OpenAIManager OpenAIManager

<PageTitle>Home</PageTitle>

<h1>Plant Contoso</h1>

Click on a box to take a picture and analyse it

<br />

<div style="display: flex;">
    <div style="position: relative; display: inline-block; flex: 1;">
        <img src="resources/Designer.jpeg" alt="Designer Image" style="width: 100%;" />
        <div style="position: absolute; top: 50px; left: 200px;">
            <button @onclick="() => ToggleTextArea(1)" style="background: yellow; border: 2px solid black;">
                <img src="resources/robotarm.png" alt="CarEquipment" style="width: 75px; height: 75px;" />
            </button>
        </div>
        <div style="position: absolute; top: 230px; left: 250px;">
            <button @onclick="() => ToggleTextArea(2)" style="background: orange; border: 2px solid black;">
                <img src="resources/workers.png" alt="WorkersStation" style="width: 75px; height: 75px;" />
            </button>
        </div>
        <div style="position: absolute; top: 400px; left: 420px;">
            <button @onclick="() => ToggleTextArea(3)" style="background: purple; border: 2px solid black;">
                <img src="resources/desk.jpeg" alt="DeskEquipment" style="width: 75px; height: 75px;" />
            </button>
        </div>
    </div>
    <div style="flex: 1; padding-left: 20px;">
        @if (showTextArea)
        {
            <img src="@imagePath" alt="Captured Image" style="width: @pictureWidth;" />
            <br />
            <br />
            <textarea @bind=message style="width: 100%; height: @textAreaHeight;"></textarea>
            <br />
            <br />
            <button @onclick="Analyze">Analyze</button>
            <br />
        }

        @if (showResponse)
        {
            if(@response == String.Empty)
            {
                <pre>Loading...</pre>
            }
            <br/>
            <pre>@response</pre>
        }
    </div>
</div>

@code {
    private bool showTextArea = false;
    private bool showResponse = false;
    private int buttonClicked = 0;
    private string message = "clicked button";
    private string imagePath = "";
    private string response = "";
    private string formattedResponse = "";
    private string textAreaHeight = "100px";
    private string pictureWidth = "100%";

    private void ToggleTextArea(int buttonNumber)
    {
        if (showTextArea && buttonClicked == buttonNumber)
        {
            showTextArea = false;
            buttonClicked = 0;
            imagePath = "";
        }
        else
        {
            showTextArea = true;
            buttonClicked = buttonNumber;

            switch (buttonNumber)
            {
                case 1:
                    message = @"Security checks:
- helmets worn by workers
- gloves worn by workers
- glasses worn by workers
- car correctly held by robot arms
Object to be present:
- instruction checks attached on the car
- front wheels ready to be placed
- windshield already mounted on the car
- lights already mounted on the vehicle
- red robot ready under the car to land it";
                    textAreaHeight = "270px";
                    pictureWidth = "100%";
                    break;
                case 2:
                    message = @"Security checks:
- workers are wearing security gloves
- workers are wearing security glasses. If not sure, say it
- in all stations present exactly two workers. True or false value";
                    textAreaHeight = "110px";
                    pictureWidth = "100%";
                    break;
                default:
                    message = @"Object to be present:
- security helmet
- security gloves
- hammer
- wrenches
- allen wrenches
- screwdrivers
- ammeter";
                    textAreaHeight = "200px";
                    pictureWidth = "85%";
                    break;
            }

            imagePath = $"resources/picture_{buttonNumber}.jpg";
        }
        response = "";
        showResponse = false; // Hide response when toggling text area
    }

    private async void Analyze()
    {
        response = String.Empty;
        showResponse = true;
        bool isMessageCorrectlyParsed = false;
        int maxRetries = 5;
        int counter = 0;

        while(!isMessageCorrectlyParsed && counter < maxRetries)
        {
            try
            {
                counter++;
                response = await OpenAIManager.GetCompletionV2(message, imagePath);
                response = "asd";
                formattedResponse = FormatJson(response);
                if(formattedResponse != String.Empty)
                {
                    isMessageCorrectlyParsed = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error in parsing, retrying...");
            }
        }

        if (isMessageCorrectlyParsed)
        {
            response = formattedResponse;
        }
        else
        {
            response = "An error occurred, please try in few seconds";            
        }
        StateHasChanged();
    }

    private string FormatJson(string json)
    {
        try
        {
            string j = json.Replace("`", "");
            j = j.Substring(4);
            var options = new JsonSerializerOptions
                {
                    WriteIndented = true
                };
            var jsonElement = JsonSerializer.Deserialize<JsonElement>(j);
            return JsonSerializer.Serialize(jsonElement, options);
        }
        catch(Exception exc)
        {
            Console.WriteLine($"Error in parsing response: {json}");
            return String.Empty;
        }
    }
}
